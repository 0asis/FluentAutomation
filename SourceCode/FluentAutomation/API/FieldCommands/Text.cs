// <copyright file="Text.cs" author="Brandon Stirnaman">
//     Copyright (c) 2011 Brandon Stirnaman, All rights reserved.
// </copyright>

using System;
using FluentAutomation.API.Enumerations;
using FluentAutomation.API.Providers;
using System.Linq.Expressions;

namespace FluentAutomation.API.FieldCommands
{
    /// <summary>
    /// Text Commands
    /// </summary>
    public class Text
    {
        private AutomationProvider _automation = null;
        private string _value = string.Empty;
        private bool _quickEntry = false;

        /// <summary>
        /// Initializes a new instance of the <see cref="Text"/> class.
        /// </summary>
        /// <param name="automationProvider">The automation provider.</param>
        /// <param name="value">The value.</param>
        public Text(AutomationProvider automationProvider, string value)
        {
            _automation = automationProvider;
            _value = value;
        }

        /// <summary>
        /// Text Commands with Quickly flag set.
        /// </summary>
        public Text Quickly
        {
            get
            {
                _quickEntry = true;
                return this;
            }
        }

        /// <summary>
        /// Sets the value in the specified field.
        /// </summary>
        /// <param name="fieldSelector">The field selector.</param>
        public void In(string fieldSelector)
        {
            In(fieldSelector, MatchConditions.None);
        }

        /// <summary>
        /// Sets the value in the specified field.
        /// </summary>
        /// <param name="fieldSelector">The field selector.</param>
        /// <param name="conditions">The conditions.</param>
        public void In(string fieldSelector, MatchConditions conditions)
        {
            var field = _automation.GetTextElement(fieldSelector, conditions);

            if (_quickEntry)
            {
                field.SetValueQuickly(_value);
            }
            else
            {
                field.SetValue(_value);
            }
        }

        /// <summary>
        /// Sets the value in the fields that match the selector generated by the Expression.
        /// </summary>
        /// <param name="fieldSelectorExpression">The field selector expression.</param>
        public void In(Expression<Func<string, string>> fieldSelectorExpression)
        {
            In(fieldSelectorExpression, MatchConditions.None);
        }

        /// <summary>
        /// Sets the value in the fields that match the selector generated by the Expression.
        /// </summary>
        /// <param name="fieldSelectorExpression">The field selector expression.</param>
        /// <param name="conditions">The conditions.</param>
        public void In(Expression<Func<string, string>> fieldSelectorExpression, MatchConditions conditions)
        {
            var fieldSelectorFunc = fieldSelectorExpression.Compile();
            In(fieldSelectorFunc(_value), conditions);
        }
    }
}
